(define square (lambda (x) (* x x)))

(define abs (lambda (x) (if (< x 0) (* -1 x) x)))

(define error (lambda (guess actual) (abs (- guess actual))))

(define good-enough? (lambda (guess x)
                      (<
                       (error (square guess) x)
                       0.001)))

(define average (lambda (x y) (/ (+ x y) 2)))

(define improve (lambda (guess x)
                  (average guess (/ x guess))))

(define sqrt-iter (lambda (guess x)
                    (if (good-enough? guess x)
                        guess
                        (sqrt-iter (improve guess x) x))))

(define sqrt (lambda (x) (sqrt-iter 1.0 x)))

(display (square 3))
;; 9

(display (abs -3))
;; 3

(display (abs 0))
;; 0

(display (abs 2))
;; 2

(display (error 4 3))
;; 1

(display (error 3 4))
;; 1

(display (error 3 3.0001))
;; 0.0001

(display (good-enough? 4 3))
;; #f

(display (good-enough? 3 9.0001))
;; #t

(display (average 3.0 9))
;; 6.0

(display (sqrt 9))
;; 3.00009155413
